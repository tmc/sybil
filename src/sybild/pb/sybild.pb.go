// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sybild.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sybild.proto

It has these top-level messages:
	IngestRequest
	IngestResponse
	QueryFilter
	QueryRequest
	QueryResult
	Histogram
	ResultMap
	SetField
	Record
	QueryResults
	QueryResponse
	ListTablesRequest
	ListTablesResponse
	GetTableRequest
	Table
	TrimRequest
	TrimResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// QueryType defines the types of query that can be performed.
type QueryType int32

const (
	QueryType_QUERY_TYPE_UNKNOWN QueryType = 0
	QueryType_TABLE              QueryType = 1
	QueryType_TIME_SERIES        QueryType = 2
	QueryType_DISTRIBUTION       QueryType = 3
	QueryType_SAMPLES            QueryType = 4
)

var QueryType_name = map[int32]string{
	0: "QUERY_TYPE_UNKNOWN",
	1: "TABLE",
	2: "TIME_SERIES",
	3: "DISTRIBUTION",
	4: "SAMPLES",
}
var QueryType_value = map[string]int32{
	"QUERY_TYPE_UNKNOWN": 0,
	"TABLE":              1,
	"TIME_SERIES":        2,
	"DISTRIBUTION":       3,
	"SAMPLES":            4,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// QueryOp is the type of operation to perform in the query.
type QueryOp int32

const (
	QueryOp_QUERY_OP_UNKNOWN QueryOp = 0
	QueryOp_AVERAGE          QueryOp = 1
	QueryOp_HISTOGRAM        QueryOp = 2
	QueryOp_LOG_HISTOGRAM    QueryOp = 3
)

var QueryOp_name = map[int32]string{
	0: "QUERY_OP_UNKNOWN",
	1: "AVERAGE",
	2: "HISTOGRAM",
	3: "LOG_HISTOGRAM",
}
var QueryOp_value = map[string]int32{
	"QUERY_OP_UNKNOWN": 0,
	"AVERAGE":          1,
	"HISTOGRAM":        2,
	"LOG_HISTOGRAM":    3,
}

func (x QueryOp) String() string {
	return proto.EnumName(QueryOp_name, int32(x))
}
func (QueryOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// QueryFilterOp is the operation to apply to a column as part of a QueryFilter.
type QueryFilterOp int32

const (
	QueryFilterOp_QUERY_FILTER_OP_UNKNOWN QueryFilterOp = 0
	QueryFilterOp_RE                      QueryFilterOp = 1
	QueryFilterOp_NRE                     QueryFilterOp = 2
	QueryFilterOp_EQ                      QueryFilterOp = 3
	QueryFilterOp_NEQ                     QueryFilterOp = 4
	QueryFilterOp_GT                      QueryFilterOp = 5
	QueryFilterOp_LT                      QueryFilterOp = 6
	QueryFilterOp_IN                      QueryFilterOp = 7
	QueryFilterOp_NIN                     QueryFilterOp = 8
)

var QueryFilterOp_name = map[int32]string{
	0: "QUERY_FILTER_OP_UNKNOWN",
	1: "RE",
	2: "NRE",
	3: "EQ",
	4: "NEQ",
	5: "GT",
	6: "LT",
	7: "IN",
	8: "NIN",
}
var QueryFilterOp_value = map[string]int32{
	"QUERY_FILTER_OP_UNKNOWN": 0,
	"RE":  1,
	"NRE": 2,
	"EQ":  3,
	"NEQ": 4,
	"GT":  5,
	"LT":  6,
	"IN":  7,
	"NIN": 8,
}

func (x QueryFilterOp) String() string {
	return proto.EnumName(QueryFilterOp_name, int32(x))
}
func (QueryFilterOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// IngestRequest inserts records into a sybil dataset.
type IngestRequest struct {
	// dataset is the name of the dataset.
	Dataset string `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
	// records is the set of records to insert.
	Records []*google_protobuf.Struct `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
}

func (m *IngestRequest) Reset()                    { *m = IngestRequest{} }
func (m *IngestRequest) String() string            { return proto.CompactTextString(m) }
func (*IngestRequest) ProtoMessage()               {}
func (*IngestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IngestRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *IngestRequest) GetRecords() []*google_protobuf.Struct {
	if m != nil {
		return m.Records
	}
	return nil
}

// IngestResponse reports the results of an ingestion request.
type IngestResponse struct {
	NumberInserted int64 `protobuf:"varint,1,opt,name=number_inserted,json=numberInserted" json:"number_inserted,omitempty"`
}

func (m *IngestResponse) Reset()                    { *m = IngestResponse{} }
func (m *IngestResponse) String() string            { return proto.CompactTextString(m) }
func (*IngestResponse) ProtoMessage()               {}
func (*IngestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IngestResponse) GetNumberInserted() int64 {
	if m != nil {
		return m.NumberInserted
	}
	return 0
}

// QueryFilter is a filter on a column.
type QueryFilter struct {
	Column string        `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	Op     QueryFilterOp `protobuf:"varint,2,opt,name=op,enum=pb.QueryFilterOp" json:"op,omitempty"`
	Value  string        `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *QueryFilter) Reset()                    { *m = QueryFilter{} }
func (m *QueryFilter) String() string            { return proto.CompactTextString(m) }
func (*QueryFilter) ProtoMessage()               {}
func (*QueryFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryFilter) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *QueryFilter) GetOp() QueryFilterOp {
	if m != nil {
		return m.Op
	}
	return QueryFilterOp_QUERY_FILTER_OP_UNKNOWN
}

func (m *QueryFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// QueryRequest describes a query.
type QueryRequest struct {
	Dataset                string         `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
	Type                   QueryType      `protobuf:"varint,2,opt,name=type,enum=pb.QueryType" json:"type,omitempty"`
	Limit                  int64          `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Ints                   []string       `protobuf:"bytes,4,rep,name=ints" json:"ints,omitempty"`
	Strs                   []string       `protobuf:"bytes,5,rep,name=strs" json:"strs,omitempty"`
	GroupBy                []string       `protobuf:"bytes,6,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	DistinctBy             []string       `protobuf:"bytes,7,rep,name=distinct_by,json=distinctBy" json:"distinct_by,omitempty"`
	SortBy                 string         `protobuf:"bytes,8,opt,name=sort_by,json=sortBy" json:"sort_by,omitempty"`
	TimeColumn             string         `protobuf:"bytes,9,opt,name=time_column,json=timeColumn" json:"time_column,omitempty"`
	TimeBucket             int64          `protobuf:"varint,10,opt,name=time_bucket,json=timeBucket" json:"time_bucket,omitempty"`
	WeightColumn           string         `protobuf:"bytes,11,opt,name=weight_column,json=weightColumn" json:"weight_column,omitempty"`
	Op                     QueryOp        `protobuf:"varint,12,opt,name=op,enum=pb.QueryOp" json:"op,omitempty"`
	IntFilters             []*QueryFilter `protobuf:"bytes,13,rep,name=int_filters,json=intFilters" json:"int_filters,omitempty"`
	StrFilters             []*QueryFilter `protobuf:"bytes,14,rep,name=str_filters,json=strFilters" json:"str_filters,omitempty"`
	SetFilters             []*QueryFilter `protobuf:"bytes,15,rep,name=set_filters,json=setFilters" json:"set_filters,omitempty"`
	IntHistogramBucketSize int64          `protobuf:"varint,16,opt,name=int_histogram_bucket_size,json=intHistogramBucketSize" json:"int_histogram_bucket_size,omitempty"`
	ReadIngestionLog       bool           `protobuf:"varint,17,opt,name=read_ingestion_log,json=readIngestionLog" json:"read_ingestion_log,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *QueryRequest) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_TYPE_UNKNOWN
}

func (m *QueryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryRequest) GetInts() []string {
	if m != nil {
		return m.Ints
	}
	return nil
}

func (m *QueryRequest) GetStrs() []string {
	if m != nil {
		return m.Strs
	}
	return nil
}

func (m *QueryRequest) GetGroupBy() []string {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *QueryRequest) GetDistinctBy() []string {
	if m != nil {
		return m.DistinctBy
	}
	return nil
}

func (m *QueryRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *QueryRequest) GetTimeColumn() string {
	if m != nil {
		return m.TimeColumn
	}
	return ""
}

func (m *QueryRequest) GetTimeBucket() int64 {
	if m != nil {
		return m.TimeBucket
	}
	return 0
}

func (m *QueryRequest) GetWeightColumn() string {
	if m != nil {
		return m.WeightColumn
	}
	return ""
}

func (m *QueryRequest) GetOp() QueryOp {
	if m != nil {
		return m.Op
	}
	return QueryOp_QUERY_OP_UNKNOWN
}

func (m *QueryRequest) GetIntFilters() []*QueryFilter {
	if m != nil {
		return m.IntFilters
	}
	return nil
}

func (m *QueryRequest) GetStrFilters() []*QueryFilter {
	if m != nil {
		return m.StrFilters
	}
	return nil
}

func (m *QueryRequest) GetSetFilters() []*QueryFilter {
	if m != nil {
		return m.SetFilters
	}
	return nil
}

func (m *QueryRequest) GetIntHistogramBucketSize() int64 {
	if m != nil {
		return m.IntHistogramBucketSize
	}
	return 0
}

func (m *QueryRequest) GetReadIngestionLog() bool {
	if m != nil {
		return m.ReadIngestionLog
	}
	return false
}

// QueryResult is the type of the query result.
type QueryResult struct {
	Histograms map[string]*Histogram `protobuf:"bytes,1,rep,name=histograms" json:"histograms,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Distinct   int64                 `protobuf:"varint,2,opt,name=distinct" json:"distinct,omitempty"`
	GroupByKey string                `protobuf:"bytes,3,opt,name=group_by_key,json=groupByKey" json:"group_by_key,omitempty"`
	Count      int64                 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Samples    int64                 `protobuf:"varint,5,opt,name=samples" json:"samples,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryResult) GetHistograms() map[string]*Histogram {
	if m != nil {
		return m.Histograms
	}
	return nil
}

func (m *QueryResult) GetDistinct() int64 {
	if m != nil {
		return m.Distinct
	}
	return 0
}

func (m *QueryResult) GetGroupByKey() string {
	if m != nil {
		return m.GroupByKey
	}
	return ""
}

func (m *QueryResult) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryResult) GetSamples() int64 {
	if m != nil {
		return m.Samples
	}
	return 0
}

// Histogram describes a distribution of values.
type Histogram struct {
	Mean         float64         `protobuf:"fixed64,1,opt,name=mean" json:"mean,omitempty"`
	Max          int64           `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	Min          int64           `protobuf:"varint,3,opt,name=min" json:"min,omitempty"`
	TotalCount   int64           `protobuf:"varint,4,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Percentiles  []int64         `protobuf:"varint,5,rep,packed,name=percentiles" json:"percentiles,omitempty"`
	IntBuckets   map[int64]int64 `protobuf:"bytes,6,rep,name=int_buckets,json=intBuckets" json:"int_buckets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RangeStart   int64           `protobuf:"varint,7,opt,name=range_start,json=rangeStart" json:"range_start,omitempty"`
	RangeEnd     int64           `protobuf:"varint,8,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
	StdDeviation float64         `protobuf:"fixed64,9,opt,name=std_deviation,json=stdDeviation" json:"std_deviation,omitempty"`
}

func (m *Histogram) Reset()                    { *m = Histogram{} }
func (m *Histogram) String() string            { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()               {}
func (*Histogram) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Histogram) GetMean() float64 {
	if m != nil {
		return m.Mean
	}
	return 0
}

func (m *Histogram) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Histogram) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Histogram) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Histogram) GetPercentiles() []int64 {
	if m != nil {
		return m.Percentiles
	}
	return nil
}

func (m *Histogram) GetIntBuckets() map[int64]int64 {
	if m != nil {
		return m.IntBuckets
	}
	return nil
}

func (m *Histogram) GetRangeStart() int64 {
	if m != nil {
		return m.RangeStart
	}
	return 0
}

func (m *Histogram) GetRangeEnd() int64 {
	if m != nil {
		return m.RangeEnd
	}
	return 0
}

func (m *Histogram) GetStdDeviation() float64 {
	if m != nil {
		return m.StdDeviation
	}
	return 0
}

// ResultMap
type ResultMap struct {
	Values map[string]*QueryResult `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResultMap) Reset()                    { *m = ResultMap{} }
func (m *ResultMap) String() string            { return proto.CompactTextString(m) }
func (*ResultMap) ProtoMessage()               {}
func (*ResultMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResultMap) GetValues() map[string]*QueryResult {
	if m != nil {
		return m.Values
	}
	return nil
}

// SetField
type SetField struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *SetField) Reset()                    { *m = SetField{} }
func (m *SetField) String() string            { return proto.CompactTextString(m) }
func (*SetField) ProtoMessage()               {}
func (*SetField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetField) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// Record is an individual record.
type Record struct {
	Strs map[string]string    `protobuf:"bytes,1,rep,name=strs" json:"strs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ints map[string]int64     `protobuf:"bytes,2,rep,name=ints" json:"ints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sets map[string]*SetField `protobuf:"bytes,3,rep,name=sets" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Record) GetStrs() map[string]string {
	if m != nil {
		return m.Strs
	}
	return nil
}

func (m *Record) GetInts() map[string]int64 {
	if m != nil {
		return m.Ints
	}
	return nil
}

func (m *Record) GetSets() map[string]*SetField {
	if m != nil {
		return m.Sets
	}
	return nil
}

// QueryResults
type QueryResults struct {
	Cumulative   *QueryResult         `protobuf:"bytes,1,opt,name=cumulative" json:"cumulative,omitempty"`
	Results      *ResultMap           `protobuf:"bytes,2,opt,name=results" json:"results,omitempty"`
	TimeResults  map[int64]*ResultMap `protobuf:"bytes,3,rep,name=time_results,json=timeResults" json:"time_results,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MatchedCount int64                `protobuf:"varint,4,opt,name=matched_count,json=matchedCount" json:"matched_count,omitempty"`
	Sorted       []*QueryResult       `protobuf:"bytes,5,rep,name=sorted" json:"sorted,omitempty"`
	Matched      []*Record            `protobuf:"bytes,6,rep,name=matched" json:"matched,omitempty"`
}

func (m *QueryResults) Reset()                    { *m = QueryResults{} }
func (m *QueryResults) String() string            { return proto.CompactTextString(m) }
func (*QueryResults) ProtoMessage()               {}
func (*QueryResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryResults) GetCumulative() *QueryResult {
	if m != nil {
		return m.Cumulative
	}
	return nil
}

func (m *QueryResults) GetResults() *ResultMap {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *QueryResults) GetTimeResults() map[int64]*ResultMap {
	if m != nil {
		return m.TimeResults
	}
	return nil
}

func (m *QueryResults) GetMatchedCount() int64 {
	if m != nil {
		return m.MatchedCount
	}
	return 0
}

func (m *QueryResults) GetSorted() []*QueryResult {
	if m != nil {
		return m.Sorted
	}
	return nil
}

func (m *QueryResults) GetMatched() []*Record {
	if m != nil {
		return m.Matched
	}
	return nil
}

// QueryResponse
type QueryResponse struct {
	Results *QueryResults `protobuf:"bytes,1,opt,name=results" json:"results,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryResponse) GetResults() *QueryResults {
	if m != nil {
		return m.Results
	}
	return nil
}

// ListTablesRequest
type ListTablesRequest struct {
}

func (m *ListTablesRequest) Reset()                    { *m = ListTablesRequest{} }
func (m *ListTablesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTablesRequest) ProtoMessage()               {}
func (*ListTablesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// ListTablesResponse
type ListTablesResponse struct {
	Tables []string `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
}

func (m *ListTablesResponse) Reset()                    { *m = ListTablesResponse{} }
func (m *ListTablesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTablesResponse) ProtoMessage()               {}
func (*ListTablesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListTablesResponse) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

// GetTableRequest
type GetTableRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetTableRequest) Reset()                    { *m = GetTableRequest{} }
func (m *GetTableRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableRequest) ProtoMessage()               {}
func (*GetTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Table
type Table struct {
	Name              string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StrColumns        []string `protobuf:"bytes,2,rep,name=str_columns,json=strColumns" json:"str_columns,omitempty"`
	IntColumns        []string `protobuf:"bytes,3,rep,name=int_columns,json=intColumns" json:"int_columns,omitempty"`
	SetColumns        []string `protobuf:"bytes,4,rep,name=set_columns,json=setColumns" json:"set_columns,omitempty"`
	Count             int64    `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	StorageSize       int64    `protobuf:"varint,6,opt,name=storage_size,json=storageSize" json:"storage_size,omitempty"`
	AverageObjectSize int64    `protobuf:"varint,7,opt,name=average_object_size,json=averageObjectSize" json:"average_object_size,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetStrColumns() []string {
	if m != nil {
		return m.StrColumns
	}
	return nil
}

func (m *Table) GetIntColumns() []string {
	if m != nil {
		return m.IntColumns
	}
	return nil
}

func (m *Table) GetSetColumns() []string {
	if m != nil {
		return m.SetColumns
	}
	return nil
}

func (m *Table) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Table) GetStorageSize() int64 {
	if m != nil {
		return m.StorageSize
	}
	return 0
}

func (m *Table) GetAverageObjectSize() int64 {
	if m != nil {
		return m.AverageObjectSize
	}
	return 0
}

// TrimRequest queries and optionally removes data from a dataset.
type TrimRequest struct {
	Dataset       string `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
	TimeColumn    string `protobuf:"bytes,2,opt,name=time_column,json=timeColumn" json:"time_column,omitempty"`
	MegabyteLimit int64  `protobuf:"varint,3,opt,name=megabyte_limit,json=megabyteLimit" json:"megabyte_limit,omitempty"`
	TimeLimit     int64  `protobuf:"varint,4,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	Delete        bool   `protobuf:"varint,5,opt,name=delete" json:"delete,omitempty"`
}

func (m *TrimRequest) Reset()                    { *m = TrimRequest{} }
func (m *TrimRequest) String() string            { return proto.CompactTextString(m) }
func (*TrimRequest) ProtoMessage()               {}
func (*TrimRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TrimRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *TrimRequest) GetTimeColumn() string {
	if m != nil {
		return m.TimeColumn
	}
	return ""
}

func (m *TrimRequest) GetMegabyteLimit() int64 {
	if m != nil {
		return m.MegabyteLimit
	}
	return 0
}

func (m *TrimRequest) GetTimeLimit() int64 {
	if m != nil {
		return m.TimeLimit
	}
	return 0
}

func (m *TrimRequest) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// TrimResponse returns the number of blocks matched by the provided thresholds.
type TrimResponse struct {
	MatchedBlocks int64 `protobuf:"varint,1,opt,name=matched_blocks,json=matchedBlocks" json:"matched_blocks,omitempty"`
}

func (m *TrimResponse) Reset()                    { *m = TrimResponse{} }
func (m *TrimResponse) String() string            { return proto.CompactTextString(m) }
func (*TrimResponse) ProtoMessage()               {}
func (*TrimResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TrimResponse) GetMatchedBlocks() int64 {
	if m != nil {
		return m.MatchedBlocks
	}
	return 0
}

func init() {
	proto.RegisterType((*IngestRequest)(nil), "pb.IngestRequest")
	proto.RegisterType((*IngestResponse)(nil), "pb.IngestResponse")
	proto.RegisterType((*QueryFilter)(nil), "pb.QueryFilter")
	proto.RegisterType((*QueryRequest)(nil), "pb.QueryRequest")
	proto.RegisterType((*QueryResult)(nil), "pb.QueryResult")
	proto.RegisterType((*Histogram)(nil), "pb.Histogram")
	proto.RegisterType((*ResultMap)(nil), "pb.ResultMap")
	proto.RegisterType((*SetField)(nil), "pb.SetField")
	proto.RegisterType((*Record)(nil), "pb.Record")
	proto.RegisterType((*QueryResults)(nil), "pb.QueryResults")
	proto.RegisterType((*QueryResponse)(nil), "pb.QueryResponse")
	proto.RegisterType((*ListTablesRequest)(nil), "pb.ListTablesRequest")
	proto.RegisterType((*ListTablesResponse)(nil), "pb.ListTablesResponse")
	proto.RegisterType((*GetTableRequest)(nil), "pb.GetTableRequest")
	proto.RegisterType((*Table)(nil), "pb.Table")
	proto.RegisterType((*TrimRequest)(nil), "pb.TrimRequest")
	proto.RegisterType((*TrimResponse)(nil), "pb.TrimResponse")
	proto.RegisterEnum("pb.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("pb.QueryOp", QueryOp_name, QueryOp_value)
	proto.RegisterEnum("pb.QueryFilterOp", QueryFilterOp_name, QueryFilterOp_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sybil service

type SybilClient interface {
	// Ingest inserts new data into a sybil dataset.
	Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error)
	// Query retrieves results from sybil.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// ListTables lists the tables in a sybil database.
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	// GetTable gets details about a particular table.
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*Table, error)
	// Trim lists and possily removes data exceeding some thresholds.
	Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error)
}

type sybilClient struct {
	cc *grpc.ClientConn
}

func NewSybilClient(cc *grpc.ClientConn) SybilClient {
	return &sybilClient{cc}
}

func (c *sybilClient) Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error) {
	out := new(IngestResponse)
	err := grpc.Invoke(ctx, "/pb.Sybil/Ingest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sybilClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/pb.Sybil/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sybilClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := grpc.Invoke(ctx, "/pb.Sybil/ListTables", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sybilClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := grpc.Invoke(ctx, "/pb.Sybil/GetTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sybilClient) Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error) {
	out := new(TrimResponse)
	err := grpc.Invoke(ctx, "/pb.Sybil/Trim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sybil service

type SybilServer interface {
	// Ingest inserts new data into a sybil dataset.
	Ingest(context.Context, *IngestRequest) (*IngestResponse, error)
	// Query retrieves results from sybil.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// ListTables lists the tables in a sybil database.
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	// GetTable gets details about a particular table.
	GetTable(context.Context, *GetTableRequest) (*Table, error)
	// Trim lists and possily removes data exceeding some thresholds.
	Trim(context.Context, *TrimRequest) (*TrimResponse, error)
}

func RegisterSybilServer(s *grpc.Server, srv SybilServer) {
	s.RegisterService(&_Sybil_serviceDesc, srv)
}

func _Sybil_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sybil/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServer).Ingest(ctx, req.(*IngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sybil_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sybil/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sybil_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sybil/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sybil_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sybil/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sybil_Trim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServer).Trim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sybil/Trim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServer).Trim(ctx, req.(*TrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sybil_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sybil",
	HandlerType: (*SybilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _Sybil_Ingest_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Sybil_Query_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _Sybil_ListTables_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _Sybil_GetTable_Handler,
		},
		{
			MethodName: "Trim",
			Handler:    _Sybil_Trim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sybild.proto",
}

func init() { proto.RegisterFile("sybild.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0x8e, 0x48, 0xfd, 0xf1, 0x48, 0xb2, 0xe8, 0x89, 0xd7, 0x51, 0x14, 0x04, 0xb1, 0x99, 0x0d,
	0x22, 0x78, 0x03, 0x79, 0xe3, 0x45, 0xb0, 0x9b, 0x2d, 0xd2, 0xc2, 0x4e, 0x14, 0x47, 0x8d, 0x2c,
	0xc7, 0x94, 0x92, 0x22, 0x40, 0x11, 0x82, 0x92, 0x26, 0x32, 0x1b, 0x8a, 0x54, 0x39, 0x23, 0xb7,
	0xca, 0x75, 0xaf, 0xf2, 0x20, 0x7d, 0x8d, 0x3e, 0x4b, 0xaf, 0xda, 0xdb, 0xbe, 0x41, 0x31, 0x67,
	0x66, 0x68, 0x5a, 0x76, 0x90, 0x2b, 0xce, 0x7c, 0xe7, 0x77, 0xce, 0xcf, 0x9c, 0x21, 0x54, 0xd9,
	0x72, 0x14, 0x84, 0x93, 0xf6, 0x3c, 0x89, 0x79, 0x4c, 0x8c, 0xf9, 0xa8, 0xf9, 0x68, 0x1a, 0xf0,
	0xd3, 0xc5, 0xa8, 0x3d, 0x8e, 0x67, 0xbb, 0xd3, 0x38, 0xf4, 0xa3, 0xe9, 0x2e, 0x12, 0x47, 0x8b,
	0xf7, 0xbb, 0x73, 0xbe, 0x9c, 0x53, 0xb6, 0xcb, 0x78, 0xb2, 0x18, 0x73, 0xf5, 0x91, 0xa2, 0xce,
	0xf7, 0x50, 0xeb, 0x46, 0x53, 0xca, 0xb8, 0x4b, 0x7f, 0x5c, 0x50, 0xc6, 0x49, 0x03, 0x4a, 0x13,
	0x9f, 0xfb, 0x8c, 0xf2, 0x46, 0x6e, 0x2b, 0xd7, 0xb2, 0x5c, 0xbd, 0x25, 0x0f, 0xa1, 0x94, 0xd0,
	0x71, 0x9c, 0x4c, 0x58, 0xc3, 0xd8, 0x32, 0x5b, 0x95, 0xbd, 0x1b, 0xed, 0x69, 0x1c, 0x4f, 0x43,
	0xda, 0xd6, 0x86, 0xda, 0x03, 0x54, 0xed, 0x6a, 0x3e, 0xe7, 0x31, 0xac, 0x69, 0xed, 0x6c, 0x1e,
	0x47, 0x8c, 0x92, 0xfb, 0x50, 0x8f, 0x16, 0xb3, 0x11, 0x4d, 0xbc, 0x20, 0x62, 0x34, 0xe1, 0x74,
	0x82, 0x66, 0x4c, 0x77, 0x4d, 0xc2, 0x5d, 0x85, 0x3a, 0xef, 0xa0, 0x72, 0xb2, 0xa0, 0xc9, 0xf2,
	0x79, 0x10, 0x72, 0x9a, 0x90, 0x4d, 0x28, 0x8e, 0xe3, 0x70, 0x31, 0x8b, 0x94, 0x57, 0x6a, 0x47,
	0xb6, 0xc1, 0x88, 0xe7, 0x0d, 0x63, 0x2b, 0xd7, 0x5a, 0xdb, 0x5b, 0x6f, 0xcf, 0x47, 0xed, 0x8c,
	0xd0, 0xf1, 0xdc, 0x35, 0xe2, 0x39, 0xd9, 0x80, 0xc2, 0x99, 0x1f, 0x2e, 0x68, 0xc3, 0x44, 0x49,
	0xb9, 0x71, 0x7e, 0xcf, 0x43, 0x15, 0x79, 0xbf, 0x7c, 0xf0, 0x6d, 0xc8, 0x8b, 0x00, 0x2a, 0x2b,
	0xb5, 0xd4, 0xca, 0x70, 0x39, 0xa7, 0x2e, 0x92, 0x84, 0x8d, 0x30, 0x98, 0x05, 0x1c, 0x6d, 0x98,
	0xae, 0xdc, 0x10, 0x02, 0xf9, 0x20, 0xe2, 0xac, 0x91, 0xdf, 0x32, 0x5b, 0x96, 0x8b, 0x6b, 0x81,
	0x31, 0x9e, 0xb0, 0x46, 0x41, 0x62, 0x62, 0x4d, 0x6e, 0x42, 0x79, 0x9a, 0xc4, 0x8b, 0xb9, 0x37,
	0x5a, 0x36, 0x8a, 0x88, 0x97, 0x70, 0x7f, 0xb0, 0x24, 0x77, 0xa0, 0x32, 0x09, 0x18, 0x0f, 0xa2,
	0x31, 0x17, 0xd4, 0x12, 0x52, 0x41, 0x43, 0x07, 0x4b, 0x72, 0x03, 0x4a, 0x2c, 0x4e, 0x90, 0x58,
	0x96, 0x91, 0x11, 0x5b, 0x29, 0xc9, 0x83, 0x19, 0xf5, 0x54, 0xd8, 0x2c, 0x24, 0x82, 0x80, 0x9e,
	0xca, 0xd0, 0x69, 0x86, 0xd1, 0x62, 0xfc, 0x81, 0xf2, 0x06, 0xa0, 0xe7, 0xc8, 0x70, 0x80, 0x08,
	0xb9, 0x0b, 0xb5, 0x9f, 0x68, 0x30, 0x3d, 0xe5, 0x5a, 0x47, 0x05, 0x75, 0x54, 0x25, 0xa8, 0xb4,
	0xdc, 0xc2, 0x04, 0x54, 0x31, 0x34, 0x95, 0x34, 0x34, 0x2a, 0xf4, 0xff, 0x86, 0x4a, 0x10, 0x71,
	0xef, 0x3d, 0xa6, 0x83, 0x35, 0x6a, 0x58, 0x36, 0xf5, 0x95, 0x34, 0xb9, 0x10, 0x44, 0x5c, 0x2e,
	0x99, 0x90, 0x60, 0x3c, 0x49, 0x25, 0xd6, 0x3e, 0x23, 0xc1, 0x78, 0x92, 0x95, 0xa0, 0xe7, 0x36,
	0xea, 0x9f, 0x93, 0xa0, 0xa9, 0x8d, 0xc7, 0x70, 0x53, 0x78, 0x75, 0x1a, 0x30, 0x1e, 0x4f, 0x13,
	0x7f, 0xa6, 0x22, 0xe0, 0xb1, 0xe0, 0x23, 0x6d, 0xd8, 0x18, 0x86, 0xcd, 0x20, 0xe2, 0x2f, 0x34,
	0x5d, 0x86, 0x63, 0x10, 0x7c, 0xa4, 0xe4, 0x01, 0x90, 0x84, 0xfa, 0x13, 0x2f, 0xc0, 0xaa, 0x0e,
	0xe2, 0xc8, 0x0b, 0xe3, 0x69, 0x63, 0x7d, 0x2b, 0xd7, 0x2a, 0xbb, 0xb6, 0xa0, 0x74, 0x35, 0xa1,
	0x17, 0x4f, 0x9d, 0x4f, 0x86, 0x2a, 0x62, 0x97, 0xb2, 0x45, 0xc8, 0xc9, 0x37, 0x00, 0xa9, 0x51,
	0xd6, 0xc8, 0xa1, 0xa7, 0x77, 0x52, 0x4f, 0x25, 0x53, 0x3b, 0x35, 0xcb, 0x3a, 0x11, 0x4f, 0x96,
	0x6e, 0x46, 0x84, 0x34, 0xa1, 0xac, 0x53, 0x8f, 0xd5, 0x68, 0xba, 0xe9, 0x9e, 0x6c, 0x41, 0x55,
	0x17, 0x91, 0xf7, 0x81, 0x2e, 0x55, 0xb5, 0x83, 0x2a, 0xa4, 0x97, 0x74, 0x29, 0x8a, 0x74, 0x1c,
	0x2f, 0x22, 0xde, 0xc8, 0xcb, 0x22, 0xc5, 0x8d, 0xa8, 0x7b, 0xe6, 0xcf, 0xe6, 0x21, 0x15, 0x35,
	0x29, 0x70, 0xbd, 0x6d, 0xf6, 0xa0, 0xbe, 0xe2, 0x0c, 0xb1, 0xc1, 0x14, 0xba, 0x65, 0x83, 0x88,
	0x25, 0xb9, 0xab, 0xbb, 0x4b, 0xf8, 0x53, 0x91, 0xdd, 0x91, 0x4a, 0xa9, 0x66, 0xfb, 0xbf, 0xf1,
	0xbf, 0x9c, 0xf3, 0xa7, 0x01, 0x56, 0x4a, 0x10, 0x6d, 0x30, 0xa3, 0xbe, 0xec, 0xe6, 0x9c, 0x8b,
	0x6b, 0xa1, 0x7c, 0xe6, 0xff, 0xac, 0x0e, 0x26, 0x96, 0x88, 0x04, 0x91, 0x6a, 0x2a, 0xb1, 0xc4,
	0xa2, 0x8d, 0xb9, 0x1f, 0x7a, 0xd9, 0x93, 0x00, 0x42, 0x4f, 0xf1, 0x38, 0x5b, 0x50, 0x99, 0xd3,
	0x64, 0x4c, 0x23, 0x1e, 0xc8, 0x23, 0x99, 0x2d, 0xd3, 0xcd, 0x42, 0xe4, 0x6b, 0x59, 0x94, 0x32,
	0xe9, 0x0c, 0x1b, 0xae, 0xb2, 0x77, 0xfb, 0x82, 0xdf, 0xed, 0x6e, 0xc4, 0x65, 0xd6, 0x75, 0x12,
	0x82, 0x14, 0x10, 0x2e, 0x24, 0x7e, 0x34, 0xa5, 0x1e, 0xe3, 0x7e, 0xc2, 0x1b, 0x25, 0xe9, 0x02,
	0x42, 0x03, 0x81, 0x90, 0x5b, 0x60, 0x49, 0x06, 0x1a, 0x4d, 0xb0, 0x29, 0x4d, 0xb7, 0x8c, 0x40,
	0x27, 0x9a, 0x88, 0xa6, 0x62, 0x7c, 0xe2, 0x4d, 0xe8, 0x59, 0xe0, 0x8b, 0x3a, 0xc1, 0xc6, 0xcc,
	0xb9, 0x55, 0xc6, 0x27, 0xcf, 0x34, 0xd6, 0x7c, 0x02, 0xf5, 0x15, 0x0f, 0xb2, 0x91, 0x37, 0x65,
	0xe4, 0x37, 0xb2, 0x91, 0x37, 0xb3, 0xa1, 0xfe, 0x94, 0x03, 0x4b, 0x56, 0xd3, 0x91, 0x3f, 0x27,
	0x0f, 0xa1, 0x88, 0x24, 0x5d, 0x71, 0x37, 0xc5, 0x51, 0x53, 0x72, 0xfb, 0x0d, 0xd2, 0xe4, 0x31,
	0x15, 0x63, 0xf3, 0x5b, 0xa8, 0x64, 0xe0, 0x2b, 0xb2, 0x7e, 0xef, 0x62, 0xd6, 0xeb, 0x2b, 0x45,
	0x9c, 0x75, 0xc6, 0x81, 0xf2, 0x40, 0xf4, 0x1e, 0x0d, 0x27, 0xe2, 0x16, 0xcf, 0xb8, 0x62, 0x69,
	0x7b, 0xce, 0x6f, 0x06, 0x14, 0x5d, 0x9c, 0x19, 0xa4, 0xa5, 0xee, 0x47, 0xe9, 0xeb, 0x86, 0xf4,
	0x55, 0x50, 0xc4, 0x70, 0x51, 0x6e, 0xca, 0x5b, 0xb3, 0xa5, 0x6e, 0x57, 0xe3, 0x12, 0x67, 0x37,
	0xd2, 0x79, 0x93, 0x77, 0xae, 0xd0, 0x29, 0x52, 0x6d, 0x5e, 0xd6, 0x99, 0x66, 0x18, 0x39, 0x9a,
	0xff, 0x05, 0x2b, 0x35, 0x73, 0xc5, 0xb1, 0x2f, 0x84, 0xdc, 0xca, 0x9c, 0x52, 0x08, 0xa6, 0x56,
	0xbf, 0x24, 0x98, 0xcd, 0x55, 0xb3, 0x03, 0xd6, 0x80, 0x7e, 0x5e, 0xd0, 0xb9, 0x18, 0xe8, 0xaa,
	0xf0, 0x5d, 0x87, 0x33, 0x1b, 0xe5, 0xbf, 0x8c, 0x74, 0x9c, 0x89, 0x04, 0x30, 0xb2, 0x0b, 0x30,
	0x5e, 0xcc, 0x16, 0xa1, 0xcf, 0x83, 0x33, 0x8a, 0x1a, 0xaf, 0x48, 0x53, 0x86, 0x85, 0xdc, 0x17,
	0xe3, 0x1d, 0x65, 0xb3, 0xad, 0x9c, 0xd6, 0x89, 0xab, 0xa9, 0xe4, 0x19, 0x54, 0x71, 0x6e, 0x68,
	0x6e, 0x19, 0xd5, 0xed, 0x15, 0xdd, 0xac, 0x3d, 0x0c, 0x66, 0x54, 0xad, 0x65, 0x88, 0x71, 0xdc,
	0x68, 0xff, 0xee, 0x42, 0x6d, 0xe6, 0xf3, 0xf1, 0x29, 0x9d, 0x5c, 0x68, 0xe5, 0xaa, 0x02, 0x65,
	0x33, 0xdf, 0x07, 0x9c, 0x66, 0x74, 0x82, 0x7d, 0x7c, 0xc5, 0x01, 0x14, 0x99, 0xfc, 0x13, 0x4a,
	0x4a, 0x50, 0xf5, 0x33, 0x9c, 0x27, 0xd9, 0xd5, 0xa4, 0xe6, 0x11, 0xd8, 0xab, 0x4e, 0x5d, 0xd1,
	0x57, 0x57, 0xdd, 0x68, 0xe7, 0x61, 0xc8, 0xc4, 0xfc, 0x2b, 0xa8, 0x69, 0x5f, 0xe4, 0xe3, 0x66,
	0xe7, 0x3c, 0x84, 0x32, 0xe0, 0xf6, 0x6a, 0x50, 0xd2, 0x28, 0x3a, 0xd7, 0x61, 0xbd, 0x17, 0x30,
	0x3e, 0xf4, 0x47, 0x21, 0x65, 0xea, 0x0d, 0xe2, 0x3c, 0x00, 0x92, 0x05, 0x95, 0xda, 0x4d, 0x28,
	0x72, 0x44, 0x74, 0xd7, 0xc8, 0x9d, 0x73, 0x0f, 0xea, 0x87, 0x54, 0x32, 0xeb, 0x47, 0x0c, 0x81,
	0x7c, 0xe4, 0xcf, 0xa8, 0xaa, 0x20, 0x5c, 0x3b, 0x7f, 0xe4, 0xa0, 0x80, 0x4c, 0x57, 0x51, 0xc5,
	0x6d, 0x26, 0x06, 0xae, 0x9c, 0xf0, 0xb2, 0x99, 0x2c, 0x9c, 0xaf, 0x72, 0xbe, 0xe3, 0x75, 0x27,
	0xae, 0x4b, 0xcd, 0x60, 0x4a, 0x86, 0x20, 0xe2, 0x19, 0x06, 0x31, 0x80, 0x35, 0x43, 0x5e, 0x69,
	0xa0, 0x29, 0x43, 0x3a, 0x77, 0x0a, 0xd9, 0xb9, 0xb3, 0x0d, 0x55, 0xc6, 0xe3, 0xc4, 0x17, 0x17,
	0xa9, 0x18, 0xbc, 0x45, 0x24, 0x56, 0x14, 0x86, 0xd3, 0xb6, 0x0d, 0xd7, 0xfd, 0x33, 0x8a, 0x2c,
	0xf1, 0xe8, 0x07, 0x3a, 0x56, 0x23, 0x5a, 0xde, 0xb8, 0xeb, 0x8a, 0x74, 0x8c, 0x14, 0xc1, 0xef,
	0xfc, 0x9a, 0x83, 0xca, 0x30, 0x09, 0x66, 0x5f, 0x7e, 0xd2, 0xad, 0x3c, 0x8e, 0x8c, 0x4b, 0x8f,
	0xa3, 0x7b, 0xb0, 0x36, 0xa3, 0x53, 0x7f, 0xb4, 0xe4, 0xd4, 0xcb, 0xbe, 0xec, 0x6a, 0x1a, 0xed,
	0xe1, 0x0b, 0xef, 0x36, 0xa0, 0x90, 0x62, 0x91, 0x25, 0x6c, 0x09, 0x44, 0x92, 0x37, 0xa1, 0x38,
	0xa1, 0x21, 0xe5, 0x14, 0x8f, 0x5e, 0x76, 0xd5, 0xce, 0x79, 0x04, 0x55, 0xe9, 0xa7, 0xca, 0xb0,
	0xb0, 0xa6, 0x9a, 0x61, 0x14, 0xc6, 0xe3, 0x0f, 0x4c, 0xd5, 0xa3, 0x6e, 0x91, 0x03, 0x04, 0x77,
	0xde, 0x81, 0x95, 0x3e, 0x3c, 0xc9, 0x26, 0x90, 0x93, 0xd7, 0x1d, 0xf7, 0xad, 0x37, 0x7c, 0xfb,
	0xaa, 0xe3, 0xbd, 0xee, 0xbf, 0xec, 0x1f, 0x7f, 0xd7, 0xb7, 0xaf, 0x11, 0x0b, 0x0a, 0xc3, 0xfd,
	0x83, 0x5e, 0xc7, 0xce, 0x91, 0x3a, 0x54, 0x86, 0xdd, 0xa3, 0x8e, 0x37, 0xe8, 0xb8, 0xdd, 0xce,
	0xc0, 0x36, 0x88, 0x0d, 0xd5, 0x67, 0xdd, 0xc1, 0xd0, 0xed, 0x1e, 0xbc, 0x1e, 0x76, 0x8f, 0xfb,
	0xb6, 0x49, 0x2a, 0x50, 0x1a, 0xec, 0x1f, 0xbd, 0xea, 0x75, 0x06, 0x76, 0x7e, 0xa7, 0x0f, 0x25,
	0xf5, 0x7a, 0x23, 0x1b, 0x60, 0x4b, 0xed, 0xc7, 0xaf, 0x32, 0xba, 0x2b, 0x50, 0xda, 0x7f, 0xd3,
	0x71, 0xf7, 0x0f, 0x85, 0xf6, 0x1a, 0x58, 0x2f, 0xba, 0x83, 0xe1, 0xf1, 0xa1, 0xbb, 0x7f, 0x64,
	0x1b, 0x64, 0x1d, 0x6a, 0xbd, 0xe3, 0x43, 0xef, 0x1c, 0x32, 0x77, 0x62, 0xd5, 0x20, 0xfa, 0x39,
	0x4e, 0x6e, 0xc1, 0x0d, 0xa9, 0xf5, 0x79, 0xb7, 0x37, 0xec, 0xb8, 0x17, 0x95, 0x17, 0xc1, 0x70,
	0x85, 0xde, 0x12, 0x98, 0x7d, 0xb7, 0x63, 0x1b, 0x02, 0xe8, 0x9c, 0xd8, 0x26, 0x02, 0x9d, 0x13,
	0x3b, 0x2f, 0x80, 0xc3, 0xa1, 0x5d, 0x10, 0xdf, 0xde, 0xd0, 0x2e, 0x8a, 0x6f, 0xb7, 0x6f, 0x97,
	0x90, 0xa1, 0xdb, 0xb7, 0xcb, 0x7b, 0xbf, 0x18, 0x50, 0x18, 0x88, 0x3f, 0x23, 0x31, 0xf4, 0xe4,
	0x53, 0x8c, 0xe0, 0x5f, 0xc1, 0x85, 0x7f, 0x9c, 0x26, 0xc9, 0x42, 0x32, 0x05, 0xce, 0x35, 0xd2,
	0x86, 0x02, 0x7a, 0x4b, 0xb2, 0x5d, 0x2b, 0x05, 0xd6, 0xb3, 0x7d, 0xac, 0xf9, 0x9f, 0x00, 0x9c,
	0x37, 0x2b, 0xf9, 0x87, 0x60, 0xb9, 0xd4, 0xd1, 0xcd, 0xcd, 0x55, 0x38, 0x15, 0x7f, 0x00, 0x65,
	0xdd, 0xbd, 0xe4, 0xba, 0xe0, 0x5a, 0xe9, 0xe5, 0xa6, 0x25, 0x40, 0x44, 0x9c, 0x6b, 0xe4, 0x5f,
	0x90, 0x17, 0x15, 0x43, 0xf0, 0x06, 0xcc, 0xd4, 0x78, 0xd3, 0x3e, 0x07, 0xb4, 0xea, 0x51, 0x11,
	0x7f, 0xc8, 0xfe, 0xf3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x72, 0xf7, 0x13, 0x26, 0x0e,
	0x00, 0x00,
}
